From cb292439204fa5a4789f7fa15112c4c72f3d1b28 Mon Sep 17 00:00:00 2001
From: Krzysztof Sobolewski <jezuch@interia.pl>
Date: Tue, 3 Jun 2008 23:19:43 +0200
Subject: [PATCH] Make the new classes warning-free in my pedantic environment:
 - Small javadoc tweaks
 - Organize imports
 - Remove unused private constructor (what's the point?...)
 - Make everything generics-proof
 AND
 - Return *modifiable* Queue from getLog() and add a TODO about that change to the javadoc
 - Declare the ConnectionEventTuple<V> field as a Queue interface, not an implementation type

---
 .../netlib/ConnectionEventTuple.java               |   23 +++------
 .../netlib/LoggerConnectionListener.java           |   48 ++++++++++----------
 2 files changed, 32 insertions(+), 39 deletions(-)

diff --git a/src/net/thousandparsec/netlib/ConnectionEventTuple.java b/src/net/thousandparsec/netlib/ConnectionEventTuple.java
index 5879a2b..804a72f 100644
--- a/src/net/thousandparsec/netlib/ConnectionEventTuple.java
+++ b/src/net/thousandparsec/netlib/ConnectionEventTuple.java
@@ -1,30 +1,23 @@
 package net.thousandparsec.netlib;
 
 /**
- * A container for {@link CennectionEvent} and the time when it occurred, in standard 'long' form.
- * Class originally designed for {@link LoggerConnectionListener}.
+ * A container for {@link ConnectionEvent} and the time when it occurred, in
+ * standard 'long' form. Class originally designed for
+ * {@link LoggerConnectionListener}.
  * 
  * @author Victor Ivri
  */
-public class ConnectionEventTuple
+public class ConnectionEventTuple<V extends Visitor>
 {
-	private final ConnectionEvent<Visitor> conEvent;
+	private final ConnectionEvent<V> conEvent;
 	private final long time; //in milliseconds from Epoch
 	
-	/*
-	 * 	Dummy constructor; never used.
-	 */
-	private ConnectionEventTuple(){
-		conEvent = null;
-		time = 0;
-	}
-	
 	/**
 	 * Constructor for ConnectionEventTuple.
 	 * 
-	 * @param event {@link ConnectionEvent<Visitor>}
+	 * @param event {@link ConnectionEvent}
 	 */
-	public ConnectionEventTuple(ConnectionEvent<Visitor> event) 
+	public ConnectionEventTuple(ConnectionEvent<V> event) 
 	{
 		time = System.currentTimeMillis();
 		conEvent = event;
@@ -43,7 +36,7 @@ public class ConnectionEventTuple
 	 * Note that the reference is of the object directly, and not of a copy of it,
 	 * thus there may be situations where it is not safe.
 	 */
-	public Frame<Visitor> getFrame()
+	public Frame<V> getFrame()
 	{
 		return this.conEvent.getFrame();
 	}
diff --git a/src/net/thousandparsec/netlib/LoggerConnectionListener.java b/src/net/thousandparsec/netlib/LoggerConnectionListener.java
index b281b2b..bac138e 100644
--- a/src/net/thousandparsec/netlib/LoggerConnectionListener.java
+++ b/src/net/thousandparsec/netlib/LoggerConnectionListener.java
@@ -1,24 +1,22 @@
 package net.thousandparsec.netlib;
 
-import java.util.*;
-import java.util.concurrent.*;
-import java.io.*;
-
-import net.thousandparsec.netlib.tp03.*;
-import net.thousandparsec.netlib.tp03.Object;
+import java.io.PrintStream;
+import java.util.Calendar;
+import java.util.Collection;
+import java.util.Date;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
 
 /**
- * A {@link ConnectionEvent} logger, that utilizes a list structure.
- * Logs the connection events in memory, and periodically dumps them either to standard-out, or to a file.
- * 
- * This class is thread safe.
+ * A {@link ConnectionEvent} logger, that utilizes a list structure. Logs the
+ * connection events in memory, and periodically dumps them either to
+ * standard-out, or to a file. This class is thread safe.
  * 
  * @author Victor Ivri
- *
  */
-public class LoggerConnectionListener<V extends Visitor> implements ConnectionListener
+public class LoggerConnectionListener<V extends Visitor> implements ConnectionListener<V>
 {
-	private final ConcurrentLinkedQueue<ConnectionEventTuple> connectionEventLog;
+	private final Queue<ConnectionEventTuple<V>> connectionEventLog;
 	private final Calendar sessionStart;
 	private final PrintStream printStream;
 	private final int dumpWhenReachSize;
@@ -28,7 +26,7 @@ public class LoggerConnectionListener<V extends Visitor> implements ConnectionLi
 	 */
 	public LoggerConnectionListener()
 	{
-		connectionEventLog = new ConcurrentLinkedQueue<ConnectionEventTuple>(); // a thread-safe class
+		connectionEventLog = new ConcurrentLinkedQueue<ConnectionEventTuple<V>>(); // a thread-safe class
 		sessionStart = Calendar.getInstance();
 		printStream = null;
 		dumpWhenReachSize = 0;
@@ -46,7 +44,7 @@ public class LoggerConnectionListener<V extends Visitor> implements ConnectionLi
 	 */
 	public LoggerConnectionListener(int sizeLimit, PrintStream ps)
 	{
-		connectionEventLog = new ConcurrentLinkedQueue<ConnectionEventTuple>(); // a thread-safe class
+		connectionEventLog = new ConcurrentLinkedQueue<ConnectionEventTuple<V>>(); // a thread-safe class
 		printStream = ps;
 		dumpWhenReachSize = sizeLimit;
 		sessionStart = Calendar.getInstance();
@@ -55,27 +53,27 @@ public class LoggerConnectionListener<V extends Visitor> implements ConnectionLi
 	/**
 	 * Adds a {@link ConnectionEvent} to the log of events.
 	 */
-	public synchronized void connectionError(ConnectionEvent ev) 
+	public synchronized void connectionError(ConnectionEvent<V> ev) 
 	{
-		connectionEventLog.add(new ConnectionEventTuple(ev));
+		connectionEventLog.add(new ConnectionEventTuple<V>(ev));
 		dumpIfReachedLimit();
 	}
 
 	/**
 	 * Adds a {@link ConnectionEvent} to the log of events.
 	 */
-	public synchronized void frameReceived(ConnectionEvent ev) 
+	public synchronized void frameReceived(ConnectionEvent<V> ev) 
 	{
-		connectionEventLog.add(new ConnectionEventTuple(ev));
+		connectionEventLog.add(new ConnectionEventTuple<V>(ev));
 		dumpIfReachedLimit();
 	}
 
 	/**
 	 * Adds a {@link ConnectionEvent} to the log of events.
 	 */
-	public synchronized void frameSent(ConnectionEvent ev) 
+	public synchronized void frameSent(ConnectionEvent<V> ev) 
 	{
-		connectionEventLog.add(new ConnectionEventTuple(ev));
+		connectionEventLog.add(new ConnectionEventTuple<V>(ev));
 		dumpIfReachedLimit();
 	}
 	
@@ -88,6 +86,8 @@ public class LoggerConnectionListener<V extends Visitor> implements ConnectionLi
 	}
 	
 	/**
+	 * TODO: This javadoc seems out of date, even with my change to return *modifiable* queue
+	 * (it's the point of it to be consumed by clients, right?...)
 	 * 
 	 * @return 
 	 * an immutable, synchronized <ConnectionEventTuple>{@link Collection}<ConnectionEventTuple>, 
@@ -109,9 +109,9 @@ public class LoggerConnectionListener<V extends Visitor> implements ConnectionLi
   	 *	}
   	 *
 	 */
-	public synchronized Collection<ConnectionEventTuple> getLog()
+	public synchronized Queue<ConnectionEventTuple<V>> getLog()
 	{
-		return Collections.unmodifiableCollection(connectionEventLog); 
+		return connectionEventLog; 
 	}
 	
 	/**
@@ -174,7 +174,7 @@ public class LoggerConnectionListener<V extends Visitor> implements ConnectionLi
 			
 			while (connectionEventLog.peek() != null)
 			{
-				ConnectionEventTuple cet = connectionEventLog.poll(); //get and remove event
+				ConnectionEventTuple<V> cet = connectionEventLog.poll(); //get and remove event
 				Exception ex = cet.getException();
 				String exception;
 				if (ex == null)
-- 
1.5.5.1

